using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SingleIngameMic : MonoBehaviour
{
    public AudioSource mic; // ??????? ?????? ????? ????? ???????? ???????
    private AudioClip micClip;
    private int sampleRate = 44100;  // ???©ª? ?????
    private int bufferSize = 1024;   // ?? ???? ????? ????? ?????? ???
    private bool isRecording = false; // ???? ???? ??
    private float currentDb = 0f; // ??©£????? ???? ????? ?? ????

    void Start()
    {
        string[] myMic = Microphone.devices;
        for (int i = 0; i < myMic.Length; i++)
        {
            Debug.Log(Microphone.devices[i].ToString());
        }
    }

    void Update()
    {
        if (!isRecording)
        {
            // start?? ?????? ?????? ?????? ?????? ?????? ??????
            // ? ??¡Æ ????? ????? ???????, ???? ???? ????
            micClip = Microphone.Start(Microphone.devices[0], true, 10, sampleRate);
            isRecording = true;

            // ????? ????? ????? ????
            mic.clip = micClip;
            mic.loop = true;
            mic.Play();
        }

        if (isRecording)
        {
            // ?????? ??©£????? ??? (????? ??????? ???)
            int micPosition = Microphone.GetPosition(Microphone.devices[0]);
            if (micPosition >= bufferSize)
            {
                // ????? ??????? ??????? ????? ???
                float[] micData = new float[bufferSize];
                micClip.GetData(micData, micPosition - bufferSize);

                // RMS ???? ???
                float rms = CalculateRMS(micData);
                currentDb = 20 * Mathf.Log10(rms) + 80;  // ????? ???? 0???? ????????? ????

                // ????? ?? ????? ???
                Debug.Log("Current Decibel Level: " + currentDb);
            }
        }
    }

    // RMS ??? ???
    private float CalculateRMS(float[] samples)
    {
        float sum = 0.0f;
        foreach (float sample in samples)
        {
            sum += sample * sample;
        }
        float rms = Mathf.Sqrt(sum / samples.Length);
        return rms;
    }
}
